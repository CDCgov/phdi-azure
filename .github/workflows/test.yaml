name: Test
on:
  workflow_dispatch:
  pull_request:
    branches:
      - "**"
  push:
    branches:
      - main

env:
  TEST_RUNNER_PYTHON_VERSION: 3.9

jobs:
  list-cloud-functions:
    # Get a list of all the directories within cloud-functions/.
    # This is equivalent to getting a list of all the cloud-functions.
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./cloud-functions
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Install dependencies
        run: |
          sudo apt-get install jq
      - id: make-list
        name: Generate list of directories within cloud-functions/
        # use jq to produce json output and filter out the empty item caused by final newline
        run: |
          echo "::set-output name=cloud-functions::$(ls -d */ | jq -R -s -c 'split("\n")[:-1]')"
    outputs:
      cloud-function-dirs: ${{steps.make-list.outputs.cloud-functions}}
  list-cloud-run:
    # Get a list of all the directories within cloud-run/.
    # This is equivalent to getting a list of all the cloud-run functions.
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./cloud-run
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Install dependencies
        run: |
          sudo apt-get install jq
      - id: make-list
        name: Generate list of directories within cloud-run/
        # use jq to produce json output and filter out the empty item caused by final newline
        run: |
          echo "::set-output name=cloud-run::$(ls -d */ | jq -R -s -c 'split("\n")[:-1]')"
    outputs:
      cloud-run-dirs: ${{steps.make-list.outputs.cloud-run}}

  unit-test-python-functions:
    needs: list-cloud-functions
    runs-on: ubuntu-latest
    strategy:
      matrix:
        function-to-test: ${{fromJson(needs.list-cloud-functions.outputs.cloud-function-dirs)}}
    env:
      BRANCH_NAME: ${{ github.head_ref || github.ref_name }}
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Setup python ${{env.TEST_RUNNER_PYTHON_VERSION}}
        uses: actions/setup-python@v2
        with:
          python-version: ${{env.TEST_RUNNER_PYTHON_VERSION}}
          cache: pip
      - name: Install Pytest
        run: pip install pytest
      - name: Install dependencies
        working-directory: ./cloud-functions/${{matrix.function-to-test}}
        run: |
          pip install -r requirements.txt
      - name: Run unit tests for cloud-functions
        working-directory: ./cloud-functions/${{matrix.function-to-test}}
        run: |
          python -m pytest
  unit-test-python-run:
    needs: list-cloud-run
    runs-on: ubuntu-latest
    strategy:
      matrix:
        function-to-test: ${{fromJson(needs.list-cloud-run.outputs.cloud-run-dirs)}}
    env:
      BRANCH_NAME: ${{ github.head_ref || github.ref_name }}
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Setup python ${{env.TEST_RUNNER_PYTHON_VERSION}}
        uses: actions/setup-python@v2
        with:
          python-version: ${{env.TEST_RUNNER_PYTHON_VERSION}}
          cache: pip
      - name: Install Pytest
        run: pip install pytest
      - name: Install dependencies
        working-directory: ./cloud-run/${{matrix.function-to-test}}
        run: |
          pip install -r requirements.txt
      - name: Run unit tests for cloud-run
        working-directory: ./cloud-run/${{matrix.function-to-test}}
        run: |
          python -m pytest

  code-check-python:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Setup python ${{env.TEST_RUNNER_PYTHON_VERSION}}
        uses: actions/setup-python@v2
        with:
          python-version: ${{env.TEST_RUNNER_PYTHON_VERSION}}
          cache: pip
      - name: Install dependencies
        run: |
          pip install -U pip
          pip install black flake8
      - name: Check format (black)
        run: |
          black --check --verbose .
      - name: Check style (flake8)
        run: |
          flake8
