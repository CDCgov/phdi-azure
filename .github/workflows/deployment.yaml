name: Deployment

on:
  workflow_dispatch:
    inputs:
      environment:
        description: "Environment to deploy to"
        type: environment
        required: true
  push:
    branches:
      - main

permissions:
  id-token: write
  contents: read
  packages: write
jobs:
  deployment:
    name: Deploy to Azure
    runs-on: ubuntu-latest
    environment: main
    defaults:
      run:
        shell: bash
        working-directory: ./terraform/implementation
    outputs:
      tf_env: ${{ steps.set-environment.outputs.tf_env }}
      short_cid: ${{ steps.set-environment.outputs.short_cid }}
    steps:
      - name: Check Out Changes
        uses: actions/checkout@v3

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2

      - name: "Azure login"
        uses: azure/login@v1
        with:
          client-id: ${{ secrets.CLIENT_ID }}
          tenant-id: ${{ secrets.TENANT_ID }}
          subscription-id: ${{ secrets.SUBSCRIPTION_ID }}

      - name: Load input variables
        env:
          SUBSCRIPTION_ID: ${{ secrets.SUBSCRIPTION_ID }}
          LOCATION: ${{ secrets.LOCATION }}
          RESOURCE_GROUP_NAME: ${{ secrets.RESOURCE_GROUP_NAME }}
          SMARTY_AUTH_ID: ${{ secrets.SMARTY_AUTH_ID }}
          SMARTY_AUTH_TOKEN: ${{ secrets.SMARTY_AUTH_TOKEN }}
          CLIENT_ID: ${{ secrets.CLIENT_ID }}
          OBJECT_ID: ${{ secrets.OBJECT_ID }}
          GHCR_USERNAME: ${{ github.actor }}
          GHCR_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          echo subscription_id=\""$SUBSCRIPTION_ID"\" >> terraform.tfvars
          echo location=\""$LOCATION"\" >> terraform.tfvars
          echo resource_group_name=\""$RESOURCE_GROUP_NAME"\" >> terraform.tfvars
          echo smarty_auth_id=\""$SMARTY_AUTH_ID"\" >> terraform.tfvars
          echo smarty_auth_token=\""$SMARTY_AUTH_TOKEN"\" >> terraform.tfvars
          echo client_id=\""$CLIENT_ID"\" >> terraform.tfvars
          echo object_id=\""$OBJECT_ID"\" >> terraform.tfvars
          echo ghcr_username=\""$GHCR_USERNAME"\" >> terraform.tfvars
          echo ghcr_token=\""$GHCR_TOKEN"\" >> terraform.tfvars
          echo resource_group_name=\""$RESOURCE_GROUP_NAME"\" >> backend.tfvars
          echo storage_account_name=\"phditfstate"${CLIENT_ID:0:8}"\" >> backend.tfvars
          az config set defaults.location=$LOCATION defaults.group=$RESOURCE_GROUP_NAME

      - name: Set environment
        id: set-environment
        env:
          CLIENT_ID: ${{ secrets.CLIENT_ID }}
        run: |-
          echo "tf_env=$(
          if [[ "${{ github.event.inputs.environment }}" != "" ]]; then
            echo ${{ github.event.inputs.environment }}
          else
            echo dev
          fi
          )" >> $GITHUB_OUTPUT
          echo "short_cid=${CLIENT_ID:0:8}" >> $GITHUB_OUTPUT
          echo "runner_ip=$(curl -s https://api.ipify.org/)" >> $GITHUB_OUTPUT

      - name: Whitelist runner IP
        env:
          RESOURCE_GROUP_NAME: ${{ secrets.RESOURCE_GROUP_NAME }}
          TF_ENV: ${{ steps.set-environment.outputs.tf_env }}
          SHORT_CID: ${{ steps.set-environment.outputs.short_cid }}
          RUNNER_IP: ${{ steps.set-environment.outputs.runner_ip }}
        run: |
          if [[ "$(az storage account check-name -n phdi${TF_ENV}phi${SHORT_CID} --query nameAvailable)" == "false" ]]; then
            az storage account network-rule add --account-name phdi${TF_ENV}phi${SHORT_CID} --ip-address $RUNNER_IP
          fi
          if [[ "$(az storage account check-name -n phdi${TF_ENV}funcs${SHORT_CID} --query nameAvailable)" == "false" ]]; then
            az storage account network-rule add --account-name phdi${TF_ENV}funcs${SHORT_CID} --ip-address $RUNNER_IP
          fi
          if [[ "$(az keyvault check-name -n ${TF_ENV}vault${SHORT_CID} --query nameAvailable)" == "false" ]]; then
            az keyvault network-rule add --name ${TF_ENV}vault${SHORT_CID} --ip-address $RUNNER_IP
          fi
          if [[ "$(az acr check-name -n phdi${TF_ENV}registry${SHORT_CID} --query nameAvailable)" == "false" ]]; then
            az acr network-rule add --name phdi${TF_ENV}registry${SHORT_CID} --ip-address $RUNNER_IP
            sleep 600
          fi

      - name: Cache Docker images
        uses: ScribeMD/docker-cache@0.2.7
        with:
          key: docker-${{ runner.os }}-${{ hashFiles('**/LICENSE') }}

      - name: terraform
        env:
          ARM_CLIENT_ID: ${{ secrets.CLIENT_ID }}
          ARM_TENANT_ID: ${{ secrets.TENANT_ID }}
          ARM_SUBSCRIPTION_ID: ${{ secrets.SUBSCRIPTION_ID }}
          TF_ENV: ${{ steps.set-environment.outputs.tf_env }}
        run: |
          terraform init -backend-config=backend.tfvars
          terraform workspace select $TF_ENV || terraform workspace new $TF_ENV
          terraform apply -auto-approve -lock-timeout=30m

      - name: Setup Python Environment
        uses: actions/setup-python@v1
        with:
          python-version: "3.9"

      - name: Install python dependencies
        working-directory: ./serverless-functions
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt --target=".python_packages/lib/site-packages"

      - name: Get publish profile
        env:
          TF_ENV: ${{ steps.set-environment.outputs.tf_env }}
          SHORT_CID: ${{ steps.set-environment.outputs.short_cid }}
        run: |
          echo 'PUBLISH_PROFILE<<EOF' >> $GITHUB_ENV
          az functionapp deployment list-publishing-profiles --name $TF_ENV-read-source-data-$SHORT_CID --xml >> $GITHUB_ENV
          echo 'EOF' >> $GITHUB_ENV

      - name: "Run Azure Functions Action"
        uses: Azure/functions-action@v1
        env:
          TF_ENV: ${{ steps.set-environment.outputs.tf_env }}
          SHORT_CID: ${{ steps.set-environment.outputs.short_cid }}
        with:
          app-name: "$TF_ENV-read-source-data-$SHORT_CID"
          package: serverless-functions
          publish-profile: ${{ env.PUBLISH_PROFILE }}

      - name: Add Event Grid subscription
        env:
          SUBSCRIPTION_ID: ${{ secrets.SUBSCRIPTION_ID }}
          RESOURCE_GROUP_NAME: ${{ secrets.RESOURCE_GROUP_NAME }}
          TF_ENV: ${{ steps.set-environment.outputs.tf_env }}
          SHORT_CID: ${{ steps.set-environment.outputs.short_cid }}
        run: |
          az eventgrid event-subscription create \
            --name phdi${TF_ENV}phi${SHORT_CID}Sub \
            --source-resource-id "/subscriptions/$SUBSCRIPTION_ID/resourceGroups/$RESOURCE_GROUP_NAME/providers/Microsoft.Storage/storageaccounts/phdi${TF_ENV}phi${SHORT_CID}" \
            --included-event-types Microsoft.Storage.BlobCreated \
            --subject-begins-with /blobServices/default/containers/source-data/blobs/ \
            --endpoint "/subscriptions/${SUBSCRIPTION_ID}/resourceGroups/${RESOURCE_GROUP_NAME}/providers/Microsoft.Web/sites/${TF_ENV}-read-source-data-${SHORT_CID}/functions/ReadSourceData" \
            --endpoint-type azurefunction

      - name: Remove IP Whitelist
        if: always()
        env:
          RESOURCE_GROUP_NAME: ${{ secrets.RESOURCE_GROUP_NAME }}
          TF_ENV: ${{ steps.set-environment.outputs.tf_env }}
          SHORT_CID: ${{ steps.set-environment.outputs.short_cid }}
          RUNNER_IP: ${{ steps.set-environment.outputs.runner_ip }}
        run: |
          if [[ "$(az storage account check-name -n phdi${TF_ENV}phi${SHORT_CID} --query nameAvailable)" == "false" ]]; then
            az storage account network-rule remove --account-name phdi${TF_ENV}phi${SHORT_CID} --ip-address $RUNNER_IP
          fi
          if [[ "$(az storage account check-name -n phdi${TF_ENV}funcs${SHORT_CID} --query nameAvailable)" == "false" ]]; then
            az storage account network-rule remove --account-name phdi${TF_ENV}funcs${SHORT_CID} --ip-address $RUNNER_IP
          fi
          if [[ "$(az keyvault check-name -n ${TF_ENV}vault${SHORT_CID} --query nameAvailable)" == "false" ]]; then
            az keyvault network-rule remove --name ${TF_ENV}vault${SHORT_CID} --ip-address $RUNNER_IP
          fi
          if [[ "$(az acr check-name -n phdi${TF_ENV}registry${SHORT_CID} --query nameAvailable)" == "false" ]]; then
            az acr network-rule remove --name phdi${TF_ENV}registry${SHORT_CID} --ip-address $RUNNER_IP
          fi

  end-to-end:
    name: End-to-end tests
    needs: deployment
    if: ${{ needs.deployment.outputs.tf_env == 'dev' }}
    uses: ./.github/workflows/end-to-end.yaml
    with:
      environment: ${{ needs.deployment.outputs.tf_env }}
    secrets: inherit
