name: Deployment

on:
  workflow_dispatch:
    inputs:
      environment:
        description: "Environment to deploy to"
        type: environment
        required: true
  push:
    branches:
      - main

permissions:
  id-token: write
  contents: read
  packages: write
jobs:
  deployment:
    name: Deploy to Azure
    runs-on: ubuntu-latest
    environment: main
    defaults:
      run:
        shell: bash
        working-directory: ./terraform/implementation
    steps:
      - name: Check Out Changes
        uses: actions/checkout@v3

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2

      - name: "Azure login"
        uses: azure/login@v1
        with:
          client-id: ${{ secrets.CLIENT_ID }}
          tenant-id: ${{ secrets.TENANT_ID }}
          subscription-id: ${{ secrets.SUBSCRIPTION_ID }}

      - name: Load input variables
        env:
          SUBSCRIPTION_ID: ${{ secrets.SUBSCRIPTION_ID }}
          LOCATION: ${{ secrets.LOCATION }}
          RESOURCE_GROUP_NAME: ${{ secrets.RESOURCE_GROUP_NAME }}
          SMARTY_AUTH_ID: ${{ secrets.SMARTY_AUTH_ID }}
          SMARTY_AUTH_TOKEN: ${{ secrets.SMARTY_AUTH_TOKEN }}
        run: |
          echo subscription_id=\""$SUBSCRIPTION_ID"\" >> terraform.tfvars
          echo location=\""$LOCATION"\" >> terraform.tfvars
          echo resource_group_name=\""$RESOURCE_GROUP_NAME"\" >> terraform.tfvars
          echo smarty_auth_id=\""$SMARTY_AUTH_ID"\" >> terraform.tfvars
          echo smarty_auth_token=\""$SMARTY_AUTH_TOKEN"\" >> terraform.tfvars
          echo resource_group_name=\""$RESOURCE_GROUP_NAME"\" >> backend.tfvars
          echo storage_account_name=\"phditfstate"${SUBSCRIPTION_ID:0:8}"\" >> backend.tfvars
          echo fhir_converter_url = \"""\" >> terraform.tfvars
          echo ingestion_container_url = \"""\" >> terraform.tfvars
          echo ingestion_container_identity_id = \"""\" >> terraform.tfvars

      - name: Set environment
        run: |-
          echo "TF_ENVIRONMENT=$(
          if "${{ github.event.inputs.environment }}"; then
            echo ${{ github.event.inputs.environment }}
          else
            echo dev
          fi
          )" >> $GITHUB_ENV

      - name: create container registry
        env:
          ARM_CLIENT_ID: ${{ secrets.CLIENT_ID }}
          ARM_TENANT_ID: ${{ secrets.TENANT_ID }}
          ARM_SUBSCRIPTION_ID: ${{ secrets.SUBSCRIPTION_ID }}
        run: |
          terraform init -backend-config=backend.tfvars
          terraform workspace select ${{ env.TF_ENVIRONMENT }} || terraform workspace new ${{ env.TF_ENVIRONMENT }}
          terraform apply -target="module.shared.azurerm_container_registry.phdi_registry" -auto-approve -lock-timeout=30m
          head -n -3 terraform.tfvars >> temp.txt
          rm terraform.tfvars
          mv temp.txt terraform.tfvars

      - name: Log in to the Container registry
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Push container images to Azure Container Registry
        run: |
          docker pull ghcr.io/cdcgov/phdi/fhir-converter:main
          docker pull ghcr.io/cdcgov/phdi/phdi-ingestion:main
          docker tag ghcr.io/cdcgov/phdi/fhir-converter:main phdi${{ env.TF_ENVIRONMENT }}registry.azurecr.io/phdi/fhir-converter:latest
          docker tag ghcr.io/cdcgov/phdi/phdi-ingestion:main phdi${{ env.TF_ENVIRONMENT }}registry.azurecr.io/phdi/phdi-ingestion:latest
          az acr login --name phdi${{ env.TF_ENVIRONMENT }}registry
          docker push phdi${{ env.TF_ENVIRONMENT }}registry.azurecr.io/phdi/fhir-converter:latest
          docker push phdi${{ env.TF_ENVIRONMENT }}registry.azurecr.io/phdi/phdi-ingestion:latest

      - name: Deploy container apps
        env:
          LOCATION: ${{ secrets.LOCATION }}
          RESOURCE_GROUP_NAME: ${{ secrets.RESOURCE_GROUP_NAME }}
        run: |
          az config set defaults.location=$LOCATION defaults.group=$RESOURCE_GROUP_NAME
          az extension add --name containerapp --upgrade
          az provider register --namespace Microsoft.App
          az provider register --namespace Microsoft.OperationalInsights
          REGISTRY_NAME=phdi${{ env.TF_ENVIRONMENT }}registry
          REGISTRY_PASSWORD=$(az acr credential show -n $REGISTRY_NAME --query "passwords[0].value" -o tsv)
          REGISTRY_URL=$(az acr show -n $REGISTRY_NAME --query "loginServer" -o tsv)
          if [[ ! $(az containerapp env show -n ${{ env.TF_ENVIRONMENT }}) ]]; then
            az containerapp env create \
              --name ${{ env.TF_ENVIRONMENT }} \
              --resource-group $RESOURCE_GROUP_NAME \
              --location $LOCATION
          fi
          if [[ ! $(az containerapp show -n phdi-${{ env.TF_ENVIRONMENT }}-fhir-converter) ]]; then
            az containerapp create \
              --name phdi-${{ env.TF_ENVIRONMENT }}-fhir-converter \
              --resource-group $RESOURCE_GROUP_NAME \
              --environment ${{ env.TF_ENVIRONMENT }} \
              --image $REGISTRY_URL/phdi/fhir-converter:latest \
              --target-port 8080 \
              --ingress 'external' \
              --registry-server $REGISTRY_URL \
              --registry-username $REGISTRY_NAME \
              --registry-password $REGISTRY_PASSWORD
          fi
          if [[ ! $(az containerapp show -n phdi-${{ env.TF_ENVIRONMENT }}-ingestion) ]]; then
            az containerapp create \
              --name phdi-${{ env.TF_ENVIRONMENT }}-ingestion \
              --resource-group $RESOURCE_GROUP_NAME \
              --environment ${{ env.TF_ENVIRONMENT }} \
              --image $REGISTRY_URL/phdi/phdi-ingestion:latest \
              --target-port 8080 \
              --ingress 'external' \
              --registry-server $REGISTRY_URL \
              --registry-username $REGISTRY_NAME \
              --registry-password $REGISTRY_PASSWORD \
              --system-assigned
          fi
      - name: load container urls
        run: |
          FHIR_CONVERTER_URL="https://$(az containerapp show --name "phdi-${{ env.TF_ENVIRONMENT }}-fhir-converter" --query "properties.configuration.ingress.fqdn" -o tsv)"
          INGESTION_CONTAINER_URL="https://$(az containerapp show --name "phdi-${{env.TF_ENVIRONMENT}}-ingestion" --query "properties.configuration.ingress.fqdn" -o tsv)"
          INGESTION_CONTAINER_IDENTITY_ID=$(az containerapp show --name "phdi-${{env.TF_ENVIRONMENT}}-ingestion" --query "identity.principalId" -o tsv)
          echo fhir_converter_url=\""$FHIR_CONVERTER_URL"\" >> terraform.tfvars
          echo ingestion_container_url=\""$INGESTION_CONTAINER_URL"\" >> terraform.tfvars
          echo ingestion_container_identity_id=\""$INGESTION_CONTAINER_IDENTITY_ID"\" >> terraform.tfvars
      - name: terraform
        env:
          ARM_CLIENT_ID: ${{ secrets.CLIENT_ID }}
          ARM_TENANT_ID: ${{ secrets.TENANT_ID }}
          ARM_SUBSCRIPTION_ID: ${{ secrets.SUBSCRIPTION_ID }}
        run: |
          terraform apply -auto-approve -lock-timeout=30m

      - name: Setup Python Environment
        uses: actions/setup-python@v1
        with:
          python-version: "3.9"

      - name: Install python dependencies
        working-directory: ./serverless-functions
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt --target=".python_packages/lib/site-packages"

      - name: "Run Azure Functions Action"
        uses: Azure/functions-action@v1
        with:
          app-name: "phdi-${{ env.TF_ENVIRONMENT }}-read-source-data"
          package: serverless-functions
