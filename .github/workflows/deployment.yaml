name: Deployment

on:
  workflow_dispatch:
    inputs:
      environment:
        description: "Environment to deploy to"
        type: environment
        required: true
  push:
    branches:
      - main

permissions:
  id-token: write
  contents: read
  packages: write
jobs:
  deployment:
    name: Deploy to Azure
    runs-on: ubuntu-latest
    environment: main
    defaults:
      run:
        shell: bash
        working-directory: ./terraform/implementation
    steps:
      - name: Check Out Changes
        uses: actions/checkout@v3

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2

      - name: "Azure login"
        uses: azure/login@v1
        with:
          client-id: ${{ secrets.CLIENT_ID }}
          tenant-id: ${{ secrets.TENANT_ID }}
          subscription-id: ${{ secrets.SUBSCRIPTION_ID }}

      - name: Load input variables
        env:
          SUBSCRIPTION_ID: ${{ secrets.SUBSCRIPTION_ID }}
          LOCATION: ${{ secrets.LOCATION }}
          RESOURCE_GROUP_NAME: ${{ secrets.RESOURCE_GROUP_NAME }}
          SMARTY_AUTH_ID: ${{ secrets.SMARTY_AUTH_ID }}
          SMARTY_AUTH_TOKEN: ${{ secrets.SMARTY_AUTH_TOKEN }}
        run: |
          echo subscription_id=\""$SUBSCRIPTION_ID"\" >> terraform.tfvars
          echo location=\""$LOCATION"\" >> terraform.tfvars
          echo resource_group_name=\""$RESOURCE_GROUP_NAME"\" >> terraform.tfvars
          echo smarty_auth_id=\""$SMARTY_AUTH_ID"\" >> terraform.tfvars
          echo smarty_auth_token=\""$SMARTY_AUTH_TOKEN"\" >> terraform.tfvars
          echo resource_group_name=\""$RESOURCE_GROUP_NAME"\" >> backend.tfvars
          echo storage_account_name=\"phditfstate"${SUBSCRIPTION_ID:0:8}"\" >> backend.tfvars
          echo fhir_converter_url = \"""\" >> terraform.tfvars
          echo ingestion_container_url = \"""\" >> terraform.tfvars

      - name: Set environment
        run: |-
          echo "TF_ENVIRONMENT=$(
          if "${{ github.event.inputs.environment }}"; then
            echo ${{ github.event.inputs.environment }}
          else
            echo dev
          fi
          )" >> $GITHUB_ENV

      - name: Create container registry, managed identity, and PHI storage account
        env:
          ARM_CLIENT_ID: ${{ secrets.CLIENT_ID }}
          ARM_TENANT_ID: ${{ secrets.TENANT_ID }}
          ARM_SUBSCRIPTION_ID: ${{ secrets.SUBSCRIPTION_ID }}
        run: |
          terraform init -backend-config=backend.tfvars
          terraform workspace select ${{ env.TF_ENVIRONMENT }} || terraform workspace new ${{ env.TF_ENVIRONMENT }}
          terraform apply -target="module.shared.azurerm_container_registry.phdi_registry" -target="module.shared.azurerm_user_assigned_identity.pipeline_runner" -target="module.shared.azurerm_storage_account.phi" -target="module.shared.azurerm_storage_share.tables" -auto-approve -lock-timeout=30m
          head -n -2 terraform.tfvars >> temp.txt
          rm terraform.tfvars
          mv temp.txt terraform.tfvars

      - name: Log in to the Container registry
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Push container images to Azure Container Registry
        run: |
          docker pull ghcr.io/cdcgov/phdi/fhir-converter:main
          docker pull ghcr.io/cdcgov/phdi/phdi-ingestion:main
          docker pull ghcr.io/cdcgov/phdi/phdi-tabulation:main
          docker tag ghcr.io/cdcgov/phdi/fhir-converter:main phdi${{ env.TF_ENVIRONMENT }}registry.azurecr.io/phdi/fhir-converter:latest
          docker tag ghcr.io/cdcgov/phdi/phdi-ingestion:main phdi${{ env.TF_ENVIRONMENT }}registry.azurecr.io/phdi/phdi-ingestion:latest
          docker tag ghcr.io/cdcgov/phdi/phdi-tabulation:main phdi${{ env.TF_ENVIRONMENT }}registry.azurecr.io/phdi/phdi-tabulation:latest
          az acr login --name phdi${{ env.TF_ENVIRONMENT }}registry
          docker push phdi${{ env.TF_ENVIRONMENT }}registry.azurecr.io/phdi/fhir-converter:latest
          docker push phdi${{ env.TF_ENVIRONMENT }}registry.azurecr.io/phdi/phdi-ingestion:latest
          docker push phdi${{ env.TF_ENVIRONMENT }}registry.azurecr.io/phdi/phdi-tabulation:latest
      - name: "Setup yq"
        uses: dcarbone/install-yq-action@v1.0.0
        with:
          version: 4.30.4
          download-compressed: true
          force: false
      - name: Deploy container apps
        env:
          LOCATION: ${{ secrets.LOCATION }}
          RESOURCE_GROUP_NAME: ${{ secrets.RESOURCE_GROUP_NAME }}
          SUBSCRIPTION_ID: ${{ secrets.SUBSCRIPTION_ID }}
          TENANT_ID: ${{ secrets.TENANT_ID }}
        run: |
          az config set defaults.location=$LOCATION defaults.group=$RESOURCE_GROUP_NAME
          az extension add --name containerapp --upgrade
          az provider register --namespace Microsoft.App
          az provider register --namespace Microsoft.OperationalInsights
          REGISTRY_NAME=phdi${{ env.TF_ENVIRONMENT }}registry
          REGISTRY_PASSWORD=$(az acr credential show -n $REGISTRY_NAME --query "passwords[0].value" -o tsv)
          REGISTRY_URL=$(az acr show -n $REGISTRY_NAME --query "loginServer" -o tsv)
          MANAGED_IDENTITY_ID="/subscriptions/$SUBSCRIPTION_ID/resourceGroups/$RESOURCE_GROUP_NAME/providers/Microsoft.ManagedIdentity/userAssignedIdentities/phdi-${{ env.TF_ENVIRONMENT }}-pipeline-runner"
          MANAGED_IDENTITY_CLIENT_ID=$(az identity show --ids $MANAGED_IDENTITY_ID --query "clientId" -o tsv)
          STORAGE_ACCOUNT_NAME=$(az storage account list --query "[?contains(name,'phdi${{ env.TF_ENVIRONMENT }}phi')] | [0].name" -o tsv)
          STORAGE_ACCOUNT_URL=$(az storage account list --query "[?contains(name,'phdi${{ env.TF_ENVIRONMENT }}phi')] | [0] | primaryEndpoints.blob" -o tsv)
          STORAGE_ACCOUNT_KEY=$(az storage account keys list --account-name $STORAGE_ACCOUNT_NAME --query "[0].value" -o tsv)
          STORAGE_SHARE_NAME=phdi${{ env.TF_ENVIRONMENT }}tables
          STORAGE_MOUNT_NAME=phdi${{ env.TF_ENVIRONMENT }}tables
          if [[ ! $(az containerapp env show -n ${{ env.TF_ENVIRONMENT }}) ]]; then
            az containerapp env create \
              --name ${{ env.TF_ENVIRONMENT }} \
              --resource-group $RESOURCE_GROUP_NAME \
              --location $LOCATION
            az containerapp env storage set \
              --access-mode ReadWrite \
              --azure-file-account-name $STORAGE_ACCOUNT_NAME \
              --azure-file-account-key $STORAGE_ACCOUNT_KEY \
              --azure-file-share-name $STORAGE_SHARE_NAME \
              --storage-name $STORAGE_MOUNT_NAME \
              --name ${{ env.TF_ENVIRONMENT }} \
              --resource-group $RESOURCE_GROUP_NAME
          fi
          if [[ ! $(az containerapp show -n phdi-${{ env.TF_ENVIRONMENT }}-fhir-converter) ]]; then
            az containerapp create \
              --name phdi-${{ env.TF_ENVIRONMENT }}-fhir-converter \
              --resource-group $RESOURCE_GROUP_NAME \
              --environment ${{ env.TF_ENVIRONMENT }} \
              --image $REGISTRY_URL/phdi/fhir-converter:latest \
              --target-port 8080 \
              --ingress 'external' \
              --registry-server $REGISTRY_URL \
              --registry-username $REGISTRY_NAME \
              --registry-password $REGISTRY_PASSWORD \
              --user-assigned $MANAGED_IDENTITY_ID 
          fi
          if [[ ! $(az containerapp show -n phdi-${{ env.TF_ENVIRONMENT }}-ingestion) ]]; then
            az containerapp create \
              --name phdi-${{ env.TF_ENVIRONMENT }}-ingestion \
              --resource-group $RESOURCE_GROUP_NAME \
              --environment ${{ env.TF_ENVIRONMENT }} \
              --image $REGISTRY_URL/phdi/phdi-ingestion:latest \
              --target-port 8080 \
              --ingress 'external' \
              --registry-server $REGISTRY_URL \
              --registry-username $REGISTRY_NAME \
              --registry-password $REGISTRY_PASSWORD \
              --user-assigned $MANAGED_IDENTITY_ID \
              --env-vars AUTH_ID="${{ secrets.SMARTY_AUTH_ID }}" AUTH_TOKEN="${{ secrets.SMARTY_AUTH_TOKEN }}" AZURE_CLIENT_ID="$MANAGED_IDENTITY_CLIENT_ID" AZURE_TENANT_ID="$TENANT_ID" AZURE_SUBSCRIPTION_ID="$SUBSCRIPTION_ID" STORAGE_ACCOUNT_URL="$STORAGE_ACCOUNT_URL"
          fi
          if [[ ! $(az containerapp show -n phdi-${{ env.TF_ENVIRONMENT }}-tabulation) ]]; then
            az containerapp create \
              --name phdi-${{ env.TF_ENVIRONMENT }}-tabulation \
              --resource-group $RESOURCE_GROUP_NAME \
              --environment ${{ env.TF_ENVIRONMENT }} \
              --image $REGISTRY_URL/phdi/phdi-tabulation:latest \
              --target-port 8080 \
              --ingress 'external' \
              --registry-server $REGISTRY_URL \
              --registry-username $REGISTRY_NAME \
              --registry-password $REGISTRY_PASSWORD \
              --user-assigned $MANAGED_IDENTITY_ID \
              --env-vars AZURE_CLIENT_ID="$MANAGED_IDENTITY_CLIENT_ID" AZURE_TENANT_ID="$TENANT_ID" AZURE_SUBSCRIPTION_ID="$SUBSCRIPTION_ID" STORAGE_ACCOUNT_URL="$STORAGE_ACCOUNT_URL"
            az containerapp show \
              --name phdi-${{ env.TF_ENVIRONMENT }}-tabulation \
              --resource-group $RESOURCE_GROUP_NAME \
              --output yaml > tabulation.yaml
            yq -i '.properties.template += {"volumes": [{"name":"phdi${{ env.TF_ENVIRONMENT }}tables","storageName":"phdi${{ env.TF_ENVIRONMENT }}tables","storageType":"AzureFile"}]}' tabulation.yaml
            yq -i '.properties.template.containers[0] += {"volumeMounts": [{"volumeName":"phdi${{ env.TF_ENVIRONMENT }}tables", "mountPath":"/tables"}]}' tabulation.yaml
            az containerapp update \
              --name phdi-${{ env.TF_ENVIRONMENT }}-tabulation \
              --resource-group $RESOURCE_GROUP_NAME \
              --yaml tabulation.yaml
          fi
      - name: load container urls
        run: |
          FHIR_CONVERTER_URL="https://$(az containerapp show --name "phdi-${{ env.TF_ENVIRONMENT }}-fhir-converter" --query "properties.configuration.ingress.fqdn" -o tsv)"
          INGESTION_CONTAINER_URL="https://$(az containerapp show --name "phdi-${{env.TF_ENVIRONMENT}}-ingestion" --query "properties.configuration.ingress.fqdn" -o tsv)"
          TABULATE_CONTAINER_URL="https://$(az containerapp show --name "phdi-${{env.TF_ENVIRONMENT}}-tabulation" --query "properties.configuration.ingress.fqdn" -o tsv)"
          echo fhir_converter_url=\""$FHIR_CONVERTER_URL"\" >> terraform.tfvars
          echo ingestion_container_url=\""$INGESTION_CONTAINER_URL"\" >> terraform.tfvars
      - name: terraform
        env:
          ARM_CLIENT_ID: ${{ secrets.CLIENT_ID }}
          ARM_TENANT_ID: ${{ secrets.TENANT_ID }}
          ARM_SUBSCRIPTION_ID: ${{ secrets.SUBSCRIPTION_ID }}
        run: |
          terraform apply -auto-approve -lock-timeout=30m

      - name: Setup Python Environment
        uses: actions/setup-python@v1
        with:
          python-version: "3.9"

      - name: Install python dependencies
        working-directory: ./serverless-functions
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt --target=".python_packages/lib/site-packages"

      - name: Get publish profile
        run: |
          echo 'PUBLISH_PROFILE<<EOF' >> $GITHUB_ENV
          az functionapp deployment list-publishing-profiles --name phdi-${{ env.TF_ENVIRONMENT }}-read-source-data --xml >> $GITHUB_ENV
          echo 'EOF' >> $GITHUB_ENV

      - name: "Run Azure Functions Action"
        uses: Azure/functions-action@v1
        with:
          app-name: "phdi-${{ env.TF_ENVIRONMENT }}-read-source-data"
          package: serverless-functions
          publish-profile: ${{ env.PUBLISH_PROFILE }}
