name: End-to-end test

on:
  workflow_dispatch:
    inputs:
      environment:
        description: "Environment to deploy to"
        type: environment
        required: true
  workflow_run:
    workflows: [Deployment]
    types: [completed]

jobs:
  e2e:
    runs-on: ubuntu-latest
    if: ${{ github.event.workflow_run.conclusion == 'success' }}
    steps:
      - name: Check Out Changes
        uses: actions/checkout@v3
      - name: Azure login
        uses: azure/login@v1
        with:
          client-id: ${{ secrets.CLIENT_ID }}
          tenant-id: ${{ secrets.TENANT_ID }}
          subscription-id: ${{ secrets.SUBSCRIPTION_ID }}
      - name: Azure defaults
        env:
          LOCATION: ${{ secrets.LOCATION }}
          RESOURCE_GROUP_NAME: ${{ secrets.RESOURCE_GROUP_NAME }}
        run: az config set defaults.location=$LOCATION defaults.group=$RESOURCE_GROUP_NAME
      - name: Set environment
        run: |-
          echo "TF_ENVIRONMENT=$(
          if "${{ github.event.inputs.environment }}"; then
            echo ${{ github.event.inputs.environment }}
          else
            echo dev
          fi
          )" >> $GITHUB_ENV
      - name: Upload sample data
        env:
          CLIENT_ID: ${{ secrets.CLIENT_ID }}
        run: |
          az storage blob upload --account-name phdi${{ env.TF_ENVIRONMENT }}phi${CLIENT_ID:0:8} --container-name source-data --name VXU-V04-01_success_single.hl7 --file sample-data/VXU-V04-01_success_single.hl7
      - name: Check pipeline run
        env:
          CLIENT_ID: ${{ secrets.CLIENT_ID }}
        run: |
          az extension add --name datafactory --upgrade
          START_DATE=$(date --date="5 min ago" "+%Y-%m-%dT%H:%M:%S")
          END_DATE=$(date --date="1 hour" "+%Y-%m-%dT%H:%M:%S")
          CHECK_COUNT=0
          check_pipeline_run_count() {
            az datafactory pipeline-run query-by-factory --factory-name "phdi-${{ env.TF_ENVIRONMENT }}-data-factory-${CLIENT_ID:0:8}" --filters operand="PipelineName" operator="Equals" values="phdi-${{ env.TF_ENVIRONMENT }}-ingestion" --filters operand="Status" operator="Equals" values="$1" --last-updated-after "$START_DATE" --last-updated-before "$END_DATE" --query "value | length(@)"
          }
          check_pipeline_success_count() {
            check_pipeline_run_count "Succeeded"
          }
          check_pipeline_failure_count() {
            check_pipeline_run_count "Failed"
          }
          while [ "$(check_pipeline_success_count)" -lt 1 ]; do
            if [ "$CHECK_COUNT" -gt 60 || "$(check_pipeline_failure_count)" -gt 0 ]; then
              echo "Pipeline run failed"
              exit 1
            fi
            echo "Waiting for pipeline to complete run..."
            sleep 10
            CHECK_COUNT=$((CHECK_COUNT+1))
          done
